from pstruct import *

class SpecDPBParamter(PStruct):
    _fields_ = [
    ]

class SpecSubPic(PStruct):
    _fields_ = [
        ("sps_subpic_ctu_top_left_x", c_uint32),
        ("sps_subpic_ctu_top_left_y", c_uint32),
        ("sps_subpic_width_minus1", c_uint32),
        ("sps_subpic_height_minus1", c_uint32),
        ("sps_subpic_treated_as_pic_flag", c_bool),
        ("sps_loop_filter_across_subpic_enabled_flag", c_bool),
        ("sps_subpic_id", c_uint16),
    ]

class SpecWPP(PStruct):
    _fields_ = [
        ("luma_log2_weight_denom", c_uint32),
        ("delta_chroma_log2_weight_denom", c_int32),
        ("num_l0_weights", c_uint32),
        ("luma_weight_l0_flag", (c_bool)*15),
        ("chroma_weight_l0_flag", (c_bool)*15),
        ("delta_luma_weight_l0", (c_int32)*15),
        ("luma_offset_l0", (c_int32)*15),
        ("delta_chroma_weight_l0", ((c_int32)*15)*2),
        ("delta_chroma_offset_l0", ((c_int32)*15)*2),
        ("num_l1_weights", c_uint32),
        ("luma_weight_l1_flag", (c_bool)*15),
        ("chroma_weight_l1_flag", (c_bool)*15),
        ("delta_luma_weight_l1", (c_int32)*15),
        ("luma_offset_l1", (c_int32)*15),
        ("delta_chroma_weight_l1", ((c_int32)*15)*2),
        ("delta_chroma_offset_l1", ((c_int32)*15)*2),
    ]

class SpecRPL(PStruct):
    _fields_ = [
        ("listIdx", c_int32),
        ("rpl_sps_flag", c_bool),
        ("rpl_idx", c_uint32),
        ("poc_lsb_lt", (c_uint32)*15),
        ("delta_poc_msb_cycle_present_flag", (c_bool)*15),
        ("delta_poc_msb_cycle_lt", (c_uint32)*15),
        ("ref_frame_poc_list", (c_uint32)*15),
        ("num_ref_entries", c_uint32),
        ("ltrp_in_header_flag", c_bool),
        ("inter_layer_ref_pic_flag", (c_bool)*29),
        ("st_ref_pic_flag", (c_bool)*29),
        ("abs_delta_poc_st", (c_uint32)*29),
        ("strp_entry_sign_flag", (c_bool)*29),
        ("rpls_poc_lsb_lt", (c_uint32)*29),
        ("ilrp_idx", (c_uint32)*29),
    ]

class SpecRPLS(PStruct):
    _fields_ = [
        ("num_ref_entries", c_uint32),
        ("long_term_ref_flag", (c_bool)*17),
        ("POC", (c_int32)*17),
    ]

class SpecRefPicture(PStruct):
    _fields_ = [
        ("referenced", c_bool),
        ("usedByCurr", c_bool),
        ("longTerm", c_bool),
        ("POC", c_int32),
        ("layerId", c_int32),
        ("reconstructed", c_bool),
        ("neededForOutput", c_bool),
    ]

class SpecRefPicList(PStruct):
    _fields_ = [
        ("num_ref_pic_list", c_int32),
    ]

class SpecVPS(PStruct):
    _fields_ = [
        ("vps_video_parameter_set_id", c_int32),
        ("vps_max_layers_minus1", c_uint32),
        ("vps_max_sublayers_minus1", c_uint32),
        ("vps_default_ptl_dpb_hrd_max_tid_flag", c_bool),
        ("vps_all_independent_layers_flag", c_bool),
        ("vps_layer_id", (c_uint32)*64),
        ("vps_independent_layer_flag", (c_bool)*64),
        ("vps_max_tid_ref_present_flag", (c_bool)*64),
        ("vps_direct_ref_layer_flag", ((c_bool)*64)*64),
        ("vps_max_tid_il_ref_pics_plus1", ((c_uint32)*64)*64),
        ("vps_each_layer_is_an_ols_flag", c_bool),
        ("vps_ols_mode_idc", c_uint32),
        ("vps_num_output_layer_sets_minus2", c_uint32),
        ("vps_ols_output_layer_flag", ((c_bool)*256)*64),
        ("vps_num_ptls_minus1", c_uint32),
        ("vps_pt_present_flag", (c_bool)*256),
        ("vps_ptl_max_tid", (c_uint32)*256),
        ("vps_ptl_alignment_zero_bit", c_uint32),
        ("vps_ols_ptl_idx", (c_uint32)*256),
        ("vps_num_dpb_params_minus1", c_int32),
        ("vps_sublayer_dpb_params_present_flag", c_bool),
        ("vps_dpb_max_tid", (c_int32)*64),
        ("vps_ols_dpb_pic_width", (c_uint32)*64),
        ("vps_ols_dpb_pic_height", (c_uint32)*64),
        ("vps_ols_dpb_chroma_format", (c_uint32)*64),
        ("vps_ols_dpb_bitdepth_minus8", (c_uint32)*64),
        ("vps_ols_dpb_params_idx", (c_int32)*64),
        ("vps_general_hrd_params_present_flag", c_bool),
        ("vps_timing_hrd_params_present_flag", c_bool),
        ("vps_sublayer_cpb_params_present_flag", c_bool),
        ("vps_num_ols_timing_hrd_params_minus1", c_uint32),
        ("vps_hrd_max_tid", (c_uint32)*256),
        ("vps_ols_timing_hrd_idx", (c_uint32)*256),
        ("vps_extension_flag", c_bool),
        ("vps_extension_data_flag", c_bool),
    ]

class SpecSPS(PStruct):
    _fields_ = [
        ("sps_seq_parameter_set_id", c_uint32),
        ("sps_video_parameter_set_id", c_uint32),
        ("sps_max_sublayers_minus1", c_uint32),
        ("sps_chroma_format_idc", c_uint32),
        ("sps_log2_ctu_size_minus5", c_uint32),
        ("sps_ptl_dpb_hrd_params_present_flag", c_bool),
        ("sps_gdr_enabled_flag", c_bool),
        ("sps_ref_pic_resampling_enabled_flag", c_bool),
        ("sps_res_change_in_clvs_allowed_flag", c_bool),
        ("sps_pic_width_max_in_luma_samples", c_uint32),
        ("sps_pic_height_max_in_luma_samples", c_uint32),
        ("sps_conformance_window_flag", c_bool),
        ("sps_conf_win_left_offset", c_uint32),
        ("sps_conf_win_right_offset", c_uint32),
        ("sps_conf_win_top_offset", c_uint32),
        ("sps_conf_win_bottom_offset", c_uint32),
        ("sps_subpic_info_present_flag", c_bool),
        ("sps_num_subpics_minus1", c_uint32),
        ("sps_independent_subpics_flag", c_bool),
        ("sps_subpic_same_size_flag", c_bool),
        ("sps_subpic_id_len_minus1", c_uint32),
        ("sps_subpic_id_mapping_explicitly_signalled_flag", c_bool),
        ("sps_subpic_id_mapping_present_flag", c_bool),
        ("sps_bitdepth_minus8", c_uint32),
        ("sps_entropy_coding_sync_enabled_flag", c_bool),
        ("sps_entry_point_offsets_present_flag", c_bool),
        ("sps_log2_max_pic_order_cnt_lsb_minus4", c_uint32),
        ("sps_poc_msb_cycle_flag", c_bool),
        ("sps_poc_msb_cycle_len_minus1", c_uint32),
        ("sps_num_extra_ph_bytes", c_uint32),
        ("sps_extra_ph_bit_present_flag", (c_bool)*16),
        ("sps_num_extra_sh_bytes", c_uint32),
        ("sps_extra_sh_bit_present_flag", (c_bool)*16),
        ("sps_sublayer_dpb_params_flag", c_bool),
        ("sps_log2_min_luma_coding_block_size_minus2", c_uint32),
        ("sps_partition_constraints_override_enabled_flag", c_bool),
        ("sps_log2_diff_min_qt_min_cb_intra_slice_luma", c_uint32),
        ("sps_max_mtt_hierarchy_depth_intra_slice_luma", c_uint32),
        ("sps_log2_diff_max_bt_min_qt_intra_slice_luma", c_uint32),
        ("sps_log2_diff_max_tt_min_qt_intra_slice_luma", c_uint32),
        ("sps_qtbtt_dual_tree_intra_flag", c_bool),
        ("sps_log2_diff_min_qt_min_cb_intra_slice_chroma", c_uint32),
        ("sps_max_mtt_hierarchy_depth_intra_slice_chroma", c_uint32),
        ("sps_log2_diff_max_bt_min_qt_intra_slice_chroma", c_uint32),
        ("sps_log2_diff_max_tt_min_qt_intra_slice_chroma", c_uint32),
        ("sps_log2_diff_min_qt_min_cb_inter_slice", c_uint32),
        ("sps_max_mtt_hierarchy_depth_inter_slice", c_uint32),
        ("sps_log2_diff_max_bt_min_qt_inter_slice", c_uint32),
        ("sps_log2_diff_max_tt_min_qt_inter_slice", c_uint32),
        ("sps_max_luma_transform_size_64_flag", c_bool),
        ("sps_transform_skip_enabled_flag", c_bool),
        ("sps_log2_transform_skip_max_size_minus2", c_uint32),
        ("sps_bdpcm_enabled_flag", c_bool),
        ("sps_mts_enabled_flag", c_bool),
        ("sps_explicit_mts_intra_enabled_flag", c_bool),
        ("sps_explicit_mts_inter_enabled_flag", c_bool),
        ("sps_lfnst_enabled_flag", c_bool),
        ("sps_joint_cbcr_enabled_flag", c_bool),
        ("sps_same_qp_table_for_chroma_flag", c_bool),
        ("sps_qp_table_start_minus26", (c_int32)*3),
        ("sps_num_points_in_qp_table_minus1", (c_int32)*3),
        ("sps_delta_qp_in_val_minus1", ((c_int32)*3)*76),
        ("sps_delta_qp_diff_val", ((c_int32)*3)*76),
        ("sps_sao_enabled_flag", c_bool),
        ("sps_alf_enabled_flag", c_bool),
        ("sps_ccalf_enabled_flag", c_bool),
        ("sps_lmcs_enabled_flag", c_bool),
        ("sps_weighted_pred_flag", c_bool),
        ("sps_weighted_bipred_flag", c_bool),
        ("sps_long_term_ref_pics_flag", c_bool),
        ("sps_inter_layer_prediction_enabled_flag", c_bool),
        ("sps_idr_rpl_present_flag", c_bool),
        ("sps_rpl1_same_as_rpl0_flag", c_bool),
        ("sps_num_ref_pic_lists", (c_uint32)*2),
        ("sps_ref_wraparound_enabled_flag", c_bool),
        ("sps_temporal_mvp_enabled_flag", c_bool),
        ("sps_sbtmvp_enabled_flag", c_bool),
        ("sps_amvr_enabled_flag", c_bool),
        ("sps_bdof_enabled_flag", c_bool),
        ("sps_bdof_control_present_in_ph_flag", c_bool),
        ("sps_smvd_enabled_flag", c_bool),
        ("sps_dmvr_enabled_flag", c_bool),
        ("sps_dmvr_control_present_in_ph_flag", c_bool),
        ("sps_mmvd_enabled_flag", c_bool),
        ("sps_mmvd_fullpel_only_enabled_flag", c_bool),
        ("sps_six_minus_max_num_merge_cand", c_uint32),
        ("sps_sbt_enabled_flag", c_bool),
        ("sps_affine_enabled_flag", c_bool),
        ("sps_five_minus_max_num_subblock_merge_cand", c_uint32),
        ("sps_6param_affine_enabled_flag", c_bool),
        ("sps_affine_type_flag", c_bool),
        ("sps_affine_amvr_enabled_flag", c_bool),
        ("sps_affine_prof_enabled_flag", c_bool),
        ("sps_prof_control_present_in_ph_flag", c_bool),
        ("sps_bcw_enabled_flag", c_bool),
        ("sps_ciip_enabled_flag", c_bool),
        ("sps_gpm_enabled_flag", c_bool),
        ("sps_max_num_merge_cand_minus_max_num_gpm_cand", c_uint32),
        ("sps_log2_parallel_merge_level_minus2", c_uint32),
        ("sps_isp_enabled_flag", c_bool),
        ("sps_mrl_enabled_flag", c_bool),
        ("sps_mip_enabled_flag", c_bool),
        ("sps_cclm_enabled_flag", c_bool),
        ("sps_chroma_horizontal_collocated_flag", c_bool),
        ("sps_chroma_vertical_collocated_flag", c_bool),
        ("sps_palette_enabled_flag", c_bool),
        ("sps_act_enabled_flag", c_bool),
        ("sps_min_qp_prime_ts", c_uint32),
        ("sps_ibc_enabled_flag", c_bool),
        ("sps_six_minus_max_num_ibc_merge_cand", c_uint32),
        ("sps_ladf_enabled_flag", c_bool),
        ("sps_num_ladf_intervals_minus2", c_uint32),
        ("sps_ladf_lowest_interval_qp_offset", c_uint32),
        ("sps_ladf_qp_offset", (c_uint32)*5),
        ("sps_ladf_delta_threshold_minus1", (c_uint32)*5),
        ("sps_explicit_scaling_list_enabled_flag", c_bool),
        ("sps_scaling_matrix_for_lfnst_disabled_flag", c_bool),
        ("sps_scaling_matrix_for_alternative_colour_space_disabled_flag", c_bool),
        ("sps_scaling_matrix_designated_colour_space_flag", c_bool),
        ("sps_dep_quant_enabled_flag", c_bool),
        ("sps_sign_data_hiding_enabled_flag", c_bool),
        ("sps_virtual_boundaries_enabled_flag", c_bool),
        ("sps_virtual_boundaries_present_flag", c_bool),
        ("sps_num_ver_virtual_boundaries", c_uint32),
        ("sps_virtual_boundary_pos_x_minus1", (c_uint32)*3),
        ("sps_num_hor_virtual_boundaries", c_uint32),
        ("sps_virtual_boundary_pos_y_minus1", (c_uint32)*3),
        ("sps_timing_hrd_params_present_flag", c_bool),
        ("sps_sublayer_cpb_params_present_flag", c_bool),
        ("sps_field_seq_flag", c_bool),
        ("sps_vui_parameters_present_flag", c_bool),
        ("sps_vui_payload_size_minus1", c_uint32),
        ("sps_vui_alignment_zero_bit", c_uint32),
        ("sps_extension_flag", c_bool),
        ("sps_extension_data_flag", (c_bool)*8),
        ("rplNum", (c_int32)*2),
    ]

class SpecSliceStruct(PStruct):
    _fields_ = [
        ("pps_slice_width_in_tiles_minus1", c_uint32),
        ("pps_slice_height_in_tiles_minus1", c_uint32),
        ("pps_num_exp_slices_in_tile", c_uint32),
        ("SliceTopLeftTileIdx", c_uint32),
        ("pps_exp_slice_height_in_ctus_minus1", c_uint32),
    ]

class SpecPPS(PStruct):
    _fields_ = [
        ("pps_pic_parameter_set_id", c_uint32),
        ("pps_seq_parameter_set_id", c_uint32),
        ("pps_mixed_nalu_types_in_pic_flag", c_bool),
        ("pps_pic_width_in_luma_samples", c_uint32),
        ("pps_pic_height_in_luma_samples", c_uint32),
        ("pps_conformance_window_flag", c_bool),
        ("pps_conf_win_left_offset", c_int32),
        ("pps_conf_win_right_offset", c_int32),
        ("pps_conf_win_top_offset", c_int32),
        ("pps_conf_win_bottom_offset", c_int32),
        ("pps_scaling_window_explicit_signalling_flag", c_bool),
        ("pps_scaling_win_left_offset", c_int32),
        ("pps_scaling_win_right_offset", c_int32),
        ("pps_scaling_win_top_offset", c_int32),
        ("pps_scaling_win_bottom_offset", c_int32),
        ("pps_output_flag_present_flag", c_bool),
        ("pps_no_pic_partition_flag", c_bool),
        ("pps_subpic_id_mapping_present_flag", c_bool),
        ("pps_num_subpics_minus1", c_uint32),
        ("pps_subpic_id_len_minus1", c_uint32),
        ("pps_subpic_id", (c_uint16)*600),
        ("pps_log2_ctu_size_minus5", c_uint32),
        ("pps_num_exp_tile_columns_minus1", c_uint32),
        ("pps_num_exp_tile_rows_minus1", c_uint32),
        ("pps_tile_column_width_minus1", (c_uint32)*30),
        ("pps_tile_row_height_minus1", (c_uint32)*440),
        ("pps_loop_filter_across_tiles_enabled_flag", c_bool),
        ("pps_rect_slice_flag", c_bool),
        ("pps_single_slice_per_subpic_flag", c_bool),
        ("pps_num_slices_in_pic_minus1", c_uint32),
        ("pps_tile_idx_delta_present_flag", c_bool),
        ("pps_tile_idx_delta_val", (c_int32)*600),
        ("pps_loop_filter_across_slices_enabled_flag", c_bool),
        ("pps_cabac_init_present_flag", c_bool),
        ("pps_num_ref_idx_default_active_minus1", (c_uint32)*2),
        ("pps_rpl1_idx_present_flag", c_bool),
        ("pps_weighted_pred_flag", c_bool),
        ("pps_weighted_bipred_flag", c_bool),
        ("pps_ref_wraparound_enabled_flag", c_bool),
        ("pps_pic_width_minus_wraparound_offset", c_int32),
        ("pps_init_qp_minus26", c_int32),
        ("pps_cu_qp_delta_enabled_flag", c_bool),
        ("pps_chroma_tool_offsets_present_flag", c_bool),
        ("pps_cb_qp_offset", c_int32),
        ("pps_cr_qp_offset", c_int32),
        ("pps_joint_cbcr_qp_offset_present_flag", c_bool),
        ("pps_joint_cbcr_qp_offset_value", c_int32),
        ("pps_slice_chroma_qp_offsets_present_flag", c_bool),
        ("pps_cu_chroma_qp_offset_list_enabled_flag", c_bool),
        ("pps_chroma_qp_offset_list_len_minus1", c_uint32),
        ("pps_cb_qp_offset_list", (c_int32)*6),
        ("pps_cr_qp_offset_list", (c_int32)*6),
        ("pps_joint_cbcr_qp_offset_list", (c_int32)*6),
        ("pps_deblocking_filter_control_present_flag", c_bool),
        ("pps_deblocking_filter_override_enabled_flag", c_bool),
        ("pps_deblocking_filter_disabled_flag", c_bool),
        ("pps_dbf_info_in_ph_flag", c_bool),
        ("pps_luma_beta_offset_div2", c_int32),
        ("pps_luma_tc_offset_div2", c_int32),
        ("pps_cb_beta_offset_div2", c_int32),
        ("pps_cb_tc_offset_div2", c_int32),
        ("pps_cr_beta_offset_div2", c_int32),
        ("pps_cr_tc_offset_div2", c_int32),
        ("pps_rpl_info_in_ph_flag", c_bool),
        ("pps_sao_info_in_ph_flag", c_bool),
        ("pps_alf_info_in_ph_flag", c_bool),
        ("pps_wp_info_in_ph_flag", c_bool),
        ("pps_qp_delta_info_in_ph_flag", c_bool),
        ("pps_picture_header_extension_present_flag", c_bool),
        ("pps_slice_header_extension_present_flag", c_bool),
        ("pps_extension_flag", c_bool),
        ("pps_extension_data_flag", c_bool),
    ]

class SpecPictureHeader(PStruct):
    _fields_ = [
        ("ph_gdr_or_irap_pic_flag", c_bool),
        ("ph_non_ref_pic_flag", c_bool),
        ("ph_gdr_pic_flag", c_bool),
        ("ph_inter_slice_allowed_flag", c_bool),
        ("ph_intra_slice_allowed_flag", c_bool),
        ("ph_pic_parameter_set_id", c_uint32),
        ("ph_pic_order_cnt_lsb", c_uint32),
        ("ph_recovery_poc_cnt", c_uint32),
        ("ph_extra_bit", (c_uint32)*16),
        ("ph_poc_msb_cycle_present_flag", c_bool),
        ("ph_poc_msb_cycle_val", c_uint32),
        ("ph_alf_enabled_flag", c_bool),
        ("ph_num_alf_aps_ids_luma", c_uint32),
        ("ph_alf_aps_id_luma", (c_uint32)*7),
        ("ph_alf_cb_enabled_flag", c_bool),
        ("ph_alf_cr_enabled_flag", c_bool),
        ("ph_alf_aps_id_chroma", c_uint32),
        ("ph_alf_cc_cb_enabled_flag", c_bool),
        ("ph_alf_cc_cb_aps_id", c_uint32),
        ("ph_alf_cc_cr_enabled_flag", c_bool),
        ("ph_alf_cc_cr_aps_id", c_uint32),
        ("ph_lmcs_enabled_flag", c_bool),
        ("ph_lmcs_aps_id", c_uint32),
        ("ph_chroma_residual_scale_flag", c_bool),
        ("ph_explicit_scaling_list_enabled_flag", c_bool),
        ("ph_scaling_list_aps_id", c_uint32),
        ("ph_virtual_boundaries_present_flag", c_bool),
        ("ph_num_ver_virtual_boundaries", c_uint32),
        ("ph_virtual_boundary_pos_x_minus1", (c_uint32)*3),
        ("ph_num_hor_virtual_boundaries", c_uint32),
        ("ph_virtual_boundary_pos_y_minus1", (c_uint32)*3),
        ("ph_pic_output_flag", c_bool),
        ("ph_partition_constraints_override_flag", c_bool),
        ("ph_log2_diff_min_qt_min_cb_intra_slice_luma", c_uint32),
        ("ph_max_mtt_hierarchy_depth_intra_slice_luma", c_uint32),
        ("ph_log2_diff_max_bt_min_qt_intra_slice_luma", c_uint32),
        ("ph_log2_diff_max_tt_min_qt_intra_slice_luma", c_uint32),
        ("ph_log2_diff_min_qt_min_cb_intra_slice_chroma", c_uint32),
        ("ph_max_mtt_hierarchy_depth_intra_slice_chroma", c_uint32),
        ("ph_log2_diff_max_bt_min_qt_intra_slice_chroma", c_uint32),
        ("ph_log2_diff_max_tt_min_qt_intra_slice_chroma", c_uint32),
        ("ph_cu_qp_delta_subdiv_intra_slice", c_uint32),
        ("ph_cu_chroma_qp_offset_subdiv_intra_slice", c_uint32),
        ("ph_log2_diff_min_qt_min_cb_inter_slice", c_uint32),
        ("ph_max_mtt_hierarchy_depth_inter_slice", c_uint32),
        ("ph_log2_diff_max_bt_min_qt_inter_slice", c_uint32),
        ("ph_log2_diff_max_tt_min_qt_inter_slice", c_uint32),
        ("ph_cu_qp_delta_subdiv_inter_slice", c_uint32),
        ("ph_cu_chroma_qp_offset_subdiv_inter_slice", c_uint32),
        ("ph_temporal_mvp_enabled_flag", c_bool),
        ("ph_collocated_from_l0_flag", c_bool),
        ("ph_collocated_ref_idx", c_uint32),
        ("ph_mmvd_fullpel_only_flag", c_bool),
        ("ph_mvd_l1_zero_flag", c_bool),
        ("ph_bdof_disabled_flag", c_bool),
        ("ph_dmvr_disabled_flag", c_bool),
        ("ph_prof_disabled_flag", c_bool),
        ("ph_qp_delta", c_int32),
        ("ph_joint_cbcr_sign_flag", c_bool),
        ("ph_sao_luma_enabled_flag", c_bool),
        ("ph_sao_chroma_enabled_flag", c_bool),
        ("ph_deblocking_params_present_flag", c_bool),
        ("ph_deblocking_filter_disabled_flag", c_bool),
        ("ph_luma_beta_offset_div2", c_int32),
        ("ph_luma_tc_offset_div2", c_int32),
        ("ph_cb_beta_offset_div2", c_int32),
        ("ph_cb_tc_offset_div2", c_int32),
        ("ph_cr_beta_offset_div2", c_int32),
        ("ph_cr_tc_offset_div2", c_int32),
        ("ph_extension_length", c_uint32),
        ("ph_extension_data_byte", (c_uint32)*256),
        ("NumRefEntriesRplIdx0LargerThan0", c_bool),
        ("NumRefEntriesRplIdx1LargerThan0", c_bool),
    ]

class SpecAlf(PStruct):
    _fields_ = [
        ("aps_params_type", c_uint32),
        ("aps_adaptation_parameter_set_id", c_uint32),
        ("aps_chroma_present_flag", c_bool),
        ("aps_extension_flag", c_bool),
        ("aps_extension_data_flag", c_bool),
        ("alf_luma_filter_signal_flag", c_bool),
        ("alf_chroma_filter_signal_flag", c_bool),
        ("alf_cc_cb_filter_signal_flag", c_bool),
        ("alf_cc_cr_filter_signal_flag", c_bool),
        ("alf_luma_clip_flag", c_bool),
        ("alf_luma_num_filters_signalled_minus1", c_uint32),
        ("alf_luma_coeff_delta_idx", (c_uint32)*25),
        ("alf_luma_coeff_abs", ((c_uint32)*25)*12),
        ("alf_luma_coeff_sign", ((c_uint32)*25)*12),
        ("alf_luma_clip_idx", ((c_uint32)*25)*12),
        ("alf_chroma_clip_flag", c_bool),
        ("alf_chroma_num_alt_filters_minus1", c_uint32),
        ("alf_chroma_coeff_abs", ((c_uint32)*8)*6),
        ("alf_chroma_coeff_sign", ((c_uint32)*8)*6),
        ("alf_chroma_clip_idx", ((c_uint32)*8)*6),
        ("alf_cc_cb_filters_signalled_minus1", c_uint32),
        ("alf_cc_cb_mapped_coeff_abs", ((c_uint32)*4)*7),
        ("alf_cc_cb_coeff_sign", ((c_uint32)*4)*7),
        ("alf_cc_cr_filters_signalled_minus1", c_uint32),
        ("alf_cc_cr_mapped_coeff_abs", ((c_uint32)*4)*7),
        ("alf_cc_cr_coeff_sign", ((c_uint32)*4)*7),
    ]

class SpecLmcs(PStruct):
    _fields_ = [
        ("aps_params_type", c_uint32),
        ("aps_adaptation_parameter_set_id", c_uint32),
        ("aps_chroma_present_flag", c_bool),
        ("aps_extension_flag", c_bool),
        ("aps_extension_data_flag", c_bool),
        ("lmcs_min_bin_idx", c_uint32),
        ("lmcs_delta_max_bin_idx", c_uint32),
        ("lmcs_delta_cw_prec_minus1", c_uint32),
        ("lmcs_delta_abs_cw", (c_uint32)*16),
        ("lmcs_delta_sign_cw_flag", (c_bool)*16),
        ("lmcs_delta_abs_crs", c_uint32),
        ("lmcs_delta_sign_crs_flag", c_bool),
    ]

class SpecScalingList(PStruct):
    _fields_ = [
        ("aps_params_type", c_uint32),
        ("aps_adaptation_parameter_set_id", c_uint32),
        ("aps_chroma_present_flag", c_bool),
        ("aps_extension_flag", c_bool),
        ("aps_extension_data_flag", c_bool),
        ("scaling_list_copy_mode_flag", (c_bool)*30),
        ("scaling_list_pred_mode_flag", (c_bool)*30),
        ("scaling_list_pred_id_delta", (c_uint32)*30),
        ("scaling_list_dc_coef", (c_int32)*30),
        ("scaling_list_delta_coef", ((c_int32)*30)*64),
        ("ScalingMatrixDCRec", (c_int32)*14),
        ("ScalingMatrixRec2x2", (((c_int32)*2)*2)*2),
        ("ScalingMatrixRec4x4", (((c_int32)*6)*4)*4),
        ("ScalingMatrixRec8x8", (((c_int32)*20)*8)*8),
    ]

class SpecAPS(PStruct):
    _fields_ = [
        ("alfNum", c_int32),
        ("lmcsNum", c_int32),
        ("scalingListNum", c_int32),
    ]

class SpecSliceHeader(PStruct):
    _fields_ = [
        ("sh_picture_header_in_slice_header_flag", c_bool),
        ("sh_subpic_id", c_uint32),
        ("sh_slice_address", c_uint32),
        ("sh_extra_bit", (c_uint32)*16),
        ("sh_num_tiles_in_slice_minus1", c_uint32),
        ("sh_slice_type", c_uint32),
        ("sh_no_output_of_prior_pics_flag", c_bool),
        ("sh_alf_enabled_flag", c_bool),
        ("sh_num_alf_aps_ids_luma", c_uint32),
        ("sh_alf_aps_id_luma", (c_int32)*7),
        ("sh_alf_cb_enabled_flag", c_bool),
        ("sh_alf_cr_enabled_flag", c_bool),
        ("sh_alf_aps_id_chroma", c_uint32),
        ("sh_alf_cc_cb_enabled_flag", c_bool),
        ("sh_alf_cc_cb_aps_id", c_uint32),
        ("sh_alf_cc_cr_enabled_flag", c_bool),
        ("sh_alf_cc_cr_aps_id", c_uint32),
        ("sh_lmcs_used_flag", c_bool),
        ("sh_explicit_scaling_list_used_flag", c_bool),
        ("sh_num_ref_idx_active_override_flag", c_bool),
        ("sh_num_ref_idx_active_minus1", (c_uint32)*2),
        ("sh_cabac_init_flag", c_bool),
        ("sh_collocated_from_l0_flag", c_bool),
        ("sh_collocated_ref_idx", c_uint32),
        ("sh_qp_delta", c_uint32),
        ("sh_cb_qp_offset", c_int32),
        ("sh_cr_qp_offset", c_int32),
        ("sh_joint_cbcr_qp_offset", c_int32),
        ("sh_cu_chroma_qp_offset_enabled_flag", c_bool),
        ("sh_sao_luma_used_flag", c_bool),
        ("sh_sao_chroma_used_flag", c_bool),
        ("sh_deblocking_params_present_flag", c_bool),
        ("sh_deblocking_filter_disabled_flag", c_bool),
        ("sh_luma_beta_offset_div2", c_int32),
        ("sh_luma_tc_offset_div2", c_int32),
        ("sh_cb_beta_offset_div2", c_int32),
        ("sh_cb_tc_offset_div2", c_int32),
        ("sh_cr_beta_offset_div2", c_int32),
        ("sh_cr_tc_offset_div2", c_int32),
        ("sh_dep_quant_used_flag", c_bool),
        ("sh_sign_data_hiding_used_flag", c_bool),
        ("sh_ts_residual_coding_disabled_flag", c_bool),
        ("sh_slice_header_extension_length", c_uint32),
        ("sh_slice_header_extension_data_byte", (c_uint32)*256),
        ("sh_entry_offset_len_minus1", c_uint32),
        ("sh_entry_point_offset_minus1", (c_uint32)*512),
        ("curPocVal", c_int32),
        ("NoBackwardPredFlag", c_bool),
        ("NumEntryPoints", c_uint32),
    ]

class Data(PStruct):
    _fields_ = [
        ("data", c_void_p),
        ("dataSize", c_uint32),
        ("sliceDataOffset", c_int32),
    ]

class SliceData(PStruct):
    _fields_ = [
        ("numSlice", c_int32),
    ]

class SpecSliceHeaderArray(PStruct):
    _fields_ = [
        ("sliceHeader", (c_void_p)*600),
        ("numSlice", c_int32),
    ]

class SpecSPSArray(PStruct):
    _fields_ = [
        ("sps", (c_void_p)*16),
        ("numSPS", c_int32),
    ]

class SpecPPSArray(PStruct):
    _fields_ = [
        ("pps", (c_void_p)*64),
        ("numPPS", c_int32),
    ]

class SpecVPSArray(PStruct):
    _fields_ = [
        ("vps", (c_void_p)*16),
        ("numVPS", c_int32),
    ]
